// Generated by gencpp from file tictoc_profiler/ProfilerEntry.msg
// DO NOT EDIT!


#ifndef TICTOC_PROFILER_MESSAGE_PROFILERENTRY_H
#define TICTOC_PROFILER_MESSAGE_PROFILERENTRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tictoc_profiler
{
template <class ContainerAllocator>
struct ProfilerEntry_
{
  typedef ProfilerEntry_<ContainerAllocator> Type;

  ProfilerEntry_()
    : seq(0)
    , name()
    , start_time(0)
    , end_time(0)
    , delta_time_ms(0.0)  {
    }
  ProfilerEntry_(const ContainerAllocator& _alloc)
    : seq(0)
    , name(_alloc)
    , start_time(0)
    , end_time(0)
    , delta_time_ms(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int64_t _start_time_type;
  _start_time_type start_time;

   typedef int64_t _end_time_type;
  _end_time_type end_time;

   typedef double _delta_time_ms_type;
  _delta_time_ms_type delta_time_ms;





  typedef boost::shared_ptr< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> const> ConstPtr;

}; // struct ProfilerEntry_

typedef ::tictoc_profiler::ProfilerEntry_<std::allocator<void> > ProfilerEntry;

typedef boost::shared_ptr< ::tictoc_profiler::ProfilerEntry > ProfilerEntryPtr;
typedef boost::shared_ptr< ::tictoc_profiler::ProfilerEntry const> ProfilerEntryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator1> & lhs, const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.name == rhs.name &&
    lhs.start_time == rhs.start_time &&
    lhs.end_time == rhs.end_time &&
    lhs.delta_time_ms == rhs.delta_time_ms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator1> & lhs, const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tictoc_profiler

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfc3f9f9968c9db2e3db18a9276d6e48";
  }

  static const char* value(const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfc3f9f9968c9db2ULL;
  static const uint64_t static_value2 = 0xe3db18a9276d6e48ULL;
};

template<class ContainerAllocator>
struct DataType< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tictoc_profiler/ProfilerEntry";
  }

  static const char* value(const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 seq\n"
"string name\n"
"int64 start_time\n"
"int64 end_time\n"
"float64 delta_time_ms\n"
;
  }

  static const char* value(const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.name);
      stream.next(m.start_time);
      stream.next(m.end_time);
      stream.next(m.delta_time_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProfilerEntry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tictoc_profiler::ProfilerEntry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tictoc_profiler::ProfilerEntry_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "start_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.start_time);
    s << indent << "end_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.end_time);
    s << indent << "delta_time_ms: ";
    Printer<double>::stream(s, indent + "  ", v.delta_time_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TICTOC_PROFILER_MESSAGE_PROFILERENTRY_H
